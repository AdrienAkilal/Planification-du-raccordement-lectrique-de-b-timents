# -*- coding: utf-8 -*-
"""Bat_Infra.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10gwTy3JvvZ1JrGiRwOFVXjPrJ5c1I5Nn
"""

pip install geopandas

import geopandas as gpd
import matplotlib.pyplot as plt

# Charger les shapefiles
batiments = gpd.read_file("/content/Batiments")
#infrastructures = gpd.read_file("infrastructures.shp")

# Afficher les premières lignes
print(batiments.head())
#print(infrastructures.head())

# Afficher sur une carte
fig, ax = plt.subplots(figsize=(10, 8))
#infrastructures.plot(ax=ax, color='grey', linewidth=0.5, label='Infrastructures')
batiments.plot(ax=ax, color='red', alpha=0.6, label='Bâtiments')
plt.legend()
plt.show()

print(batiments)

import geopandas as gpd
import matplotlib.pyplot as plt

# Charger les shapefiles
#batiments = gpd.read_file("/content/batiments.shp")
infrastructures = gpd.read_file("/content/Infrastructures")

# Afficher les premières lignes
print(infrastructures.head())

# Afficher sur une carte
fig, ax = plt.subplots(figsize=(10, 8))
infrastructures.plot(ax=ax, color='grey', linewidth=0.5, label='Infrastructures')
plt.legend()
plt.show()

import geopandas as gpd
import matplotlib.pyplot as plt

# Charger les shapefiles
batiments = gpd.read_file("/content/Batiments")
infrastructures = gpd.read_file("/content/Infrastructures")

# Afficher les premières lignes
print(batiments.head())
print(infrastructures.head())

# Afficher sur une carte
fig, ax = plt.subplots(figsize=(20, 18))
infrastructures.plot(ax=ax, color='grey', linewidth=0.9, label='Infrastructures')
batiments.plot(ax=ax, color='red', alpha=0.8, label='Bâtiments')
plt.legend()
plt.show()

import pandas as pd
data = pd.read_excel("/content/reseau_en_arbre.xlsx")
data.head()

data_infra = data[data['infra_type'] == "infra_intacte"]
data_infra

data_id_batiment_intacte = data_infra['id_batiment'].unique()
data_id_batiment_intacte

# Extraire les coordonnées x et y depuis la géométrie
batiments["x"] = batiments.geometry.x
batiments["y"] = batiments.geometry.y

# Transformer en dictionnaire : id_bat → (x, y)
coord_dict = dict(zip(batiments["id_bat"], zip(batiments["x"], batiments["y"])))

# Filtrer uniquement les IDs demandés
result_batiment_intacte = {id_: coord_dict[id_] for id_ in data_id_batiment_intacte if id_ in coord_dict}

print(result_batiment_intacte)

fig, ax = plt.subplots(figsize=(20, 18))
infrastructures.plot(ax=ax, color='grey', linewidth=0.9, label='Infrastructures')
result_batiment_intacte.plot(ax=ax, color='green', alpha=0.8, label='Bâtiments')
plt.legend()
plt.show()

import pandas as pd

# Lecture du fichier Excel contenant le réseau
network_df = pd.read_excel("reseau_en_arbre.xlsx")

# Filtrer les infrastructures à remplacer
broken_network_df = network_df[network_df["infra_type"] == "a_remplacer"]

# Créer des ensembles (sets) d'identifiants de bâtiments
set_id_batiments = set(network_df["id_batiment"].values)
set_id_broken_batiments = set(broken_network_df["id_batiment"].values)

# Initialiser les listes pour les résultats
list_id_batiment = []
state_batiment = []

# Déterminer l'état de chaque bâtiment
for id_batiment in set_id_batiments:
    list_id_batiment.append(id_batiment)
    if id_batiment in set_id_broken_batiments:
        state_batiment.append("a_reparer")
    else:
        state_batiment.append("intact")

# Créer un DataFrame final avec l'état de chaque bâtiment
state_df = pd.DataFrame({
    "id_batiment": list_id_batiment,
    "state_batiment": state_batiment
})
state_df.to_csv("etat_batiments.csv", index=False)

# Afficher le résultat
print(state_df)

